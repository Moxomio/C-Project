#include <iostream>
#include <fstream>
#include <string>
#include <ctime>
#include <algorithm>
#include <random>
#include <windows.h>
#include <stdlib.h> // For system("cls")

using namespace std;

// Maximum limits
const int MAX_QUESTION_LENGTH = 100;
const int MAX_ANSWER_LENGTH = 100;
const int MAX_FLASHCARDS = 10;

// -------------------------- Flashcard Class --------------------------
class Flashcard {
public:
    string question;
    string answer;
    int score; // 1-3 (1=hard, 2=medium, 3=easy)
    int reviewCount;

    Flashcard() : score(0), reviewCount(0) {
        question = "";
        answer = "";
    }

    Flashcard(string q, string a, int s = 0, int rc = 0) 
    
        : question(q), answer(a), score(s), reviewCount(rc) {}

    void updateScore(int s) {
        score = max(1, min(3, s)); 
        reviewCount++;
    }
};

// -------------------------- Deck Class --------------------------
class Deck {
public:
    Flashcard flashcards[MAX_FLASHCARDS]; // Fixed array
    int count; // Number of flashcards currently stored

    Deck() : count(0) {}

    void addFlashcard(string question, string answer) {
        if (count < MAX_FLASHCARDS) {
            flashcards[count] = Flashcard(question, answer);
            count++;
            cout << "Flashcard added successfully!" << endl;
        } else {
            cout << "Cannot add more flashcards. Maximum capacity reached." << endl;
        }
    }

    void getCardsForReview(Flashcard* selected[], int& selectedCount) {
        selectedCount = 0;
        // Prioritize cards with low score or few reviews
        for (int i = 0; i < count; i++) {
            if (flashcards[i].score < 2 || flashcards[i].reviewCount < 3) {
                selected[selectedCount++] = &flashcards[i];
            }
        }
        // If none selected, include all cards
        if (selectedCount == 0) {
            for (int i = 0; i < count; i++) {
                selected[selectedCount++] = &flashcards[i];
            }
        }
        // Shuffle selected cards
        random_device rd;
        mt19937 g(rd());
        shuffle(selected, selected + selectedCount, g);
    }
};

// -------------------------- FileManager Class --------------------------
class FileManager {
public:
    static void save(const Deck& deck, const string& filename) {
        ofstream wf(filename, ios::out | ios::binary);
        if (!wf) {
            cout << "Cannot open file for writing!" << endl;
            return;
        }

        wf.write((char*)&deck.count, sizeof(deck.count));
        for (int i = 0; i < deck.count; i++) {
            const Flashcard& card = deck.flashcards[i];
            size_t qLen = min(card.question.size(), (size_t)MAX_QUESTION_LENGTH - 1);
            size_t aLen = min(card.answer.size(), (size_t)MAX_ANSWER_LENGTH - 1);
            wf.write((char*)&qLen, sizeof(qLen));
            wf.write(card.question.c_str(), qLen);
            wf.write((char*)&aLen, sizeof(aLen));
            wf.write(card.answer.c_str(), aLen);
            wf.write((char*)&card.score, sizeof(card.score));
            wf.write((char*)&card.reviewCount, sizeof(card.reviewCount));
        }

        wf.close();
        cout << "✅ Flashcards saved." << endl;
    }

    static void load(Deck& deck, const string& filename) {
        ifstream rf(filename, ios::in | ios::binary);
        if (!rf) {
            cout << "⚠️ No saved file found. Starting with empty deck." << endl;
            return;
        }

        deck.count = 0;
        int count;
        rf.read((char*)&count, sizeof(count));
        for (int i = 0; i < count && i < MAX_FLASHCARDS; i++) {
            size_t qLen, aLen;
            rf.read((char*)&qLen, sizeof(qLen));
            char qBuffer[MAX_QUESTION_LENGTH] = {0};
            rf.read(qBuffer, qLen);
            string question(qBuffer, qLen);

            rf.read((char*)&aLen, sizeof(aLen));
            char aBuffer[MAX_ANSWER_LENGTH] = {0};
            rf.read(aBuffer, aLen);
            string answer(aBuffer, aLen);

            int score, reviewCount;
            rf.read((char*)&score, sizeof(score));
            rf.read((char*)&reviewCount, sizeof(reviewCount));

            deck.flashcards[i] = Flashcard(question, answer, score, reviewCount);
            deck.count++;
        }

        rf.close();
        cout << "📂 Loaded " << deck.count << " flashcards." << endl;
    }
};

// -------------------------- User Class --------------------------
class User {
private:
    string name;
    int totalReviewed;

public:
    User() : name(""), totalReviewed(0) {}

    void setName(const string& n) { name = n; }
    string getName() const { return name; }

    void update(int score) {
        totalReviewed++;
    }

    void showStats() const {
        cout << "📊 " << (name.empty() ? "User" : name) << "'s Total Reviews: " << totalReviewed << "\n";
    }
};

// -------------------------- FlashcardApp Class --------------------------
class FlashcardApp {
private:
    Deck deck;
    User user;
    string filename;

public:
    FlashcardApp(const string& file = "flashcards.dat") : filename(file) {
        srand(time(0)); // Seed random number generator
    }

    void run() {
        string name;
        do {
            cout << "Enter your name: ";
            getline(cin, name);
            if (name.empty()) {
                cout << "❌ Name cannot be empty.\n";
            }
        } while (name.empty());
        user.setName(name);

        load();
        showMenu();
    }

    void addFlashcard() {
        string question, answer;
        cout << "Enter question: ";
        getline(cin, question);
        if (question.empty()) {
            cout << "❌ Question cannot be empty.\n";
            return;
        }
        cout << "Enter answer: ";
        getline(cin, answer);
        if (answer.empty()) {
            cout << "❌ Answer cannot be empty.\n";
            return;
        }
        deck.addFlashcard(question, answer);
    }

    void reviewFlashcards() {
        if (deck.count == 0) {
            cout << "⚠️ No flashcards to review.\n";
            return;
        }

        Flashcard* selected[MAX_FLASHCARDS];
        int selectedCount;
        deck.getCardsForReview(selected, selectedCount);

        for (int i = 0; i < selectedCount; i++) {
            cout << "Q: " << selected[i]->question << endl;
            int input;
            do {
                cout << "Enter 9 to reveal answer: ";
                cin >> input;
                cin.ignore();
                if (input != 9) {
                    cout << "❌ Please enter 9.\n";
                }
            } while (input != 9);

            cout << "Answer: " << selected[i]->answer << "\n";
            int score;
            do {
                cout << "Rate difficulty (1=hard, 2=medium, 3=easy): ";
                cin >> score;
                cin.ignore();
                if (score < 1 || score > 3) {
                    cout << "❌ Please enter 1, 2, or 3.\n";
                }
            } while (score < 1 || score > 3);

            selected[i]->updateScore(score);
            user.update(score);
            cout << "Card score: " << selected[i]->score << "\n\n";
        }

        user.showStats();
    }

    void viewProgress() {
        cout << "\n📈 USER PROGRESS\n";
        user.showStats();
        cout << "\n📋 Flashcard Details:\n";
        if (deck.count == 0) {
            cout << "No flashcards available.\n";
        } else {
            for (int i = 0; i < deck.count; i++) {
                cout << "Card " << (i + 1) << ":\n";
                cout << "  Question: " << deck.flashcards[i].question << "\n";
                cout << "  Score: " << deck.flashcards[i].score << " (1=hard, 2=medium, 3=easy)\n\n";
            }
        }
        cout << "Press Enter to return to menu...";
        cin.ignore();
    }

    void save() {
        FileManager::save(deck, filename);
    }

    void load() {
        FileManager::load(deck, filename);
    }

    void showMenu() {
        int choice = 0;
        while (choice != 5) {
            cout << "\n===== Flashcard System =====" << endl;
            cout << "1. View Progress" << endl;
            cout << "2. Add Flashcard" << endl;
            cout << "3. Review Flashcards" << endl;
            cout << "4. Save" << endl;
            cout << "5. Exit" << endl;
            cout << "Enter choice: ";
            cin >> choice;
            cin.ignore();
            system("cls");

            switch (choice) {
            case 1:
                viewProgress();
                break;
            case 2:
                addFlashcard();
                break;
            case 3:
                reviewFlashcards();
                break;
            case 4:
                save();
                break;
            case 5:
                cout << "Exiting program." << endl;
                break;
            default:
                cout << "Invalid choice! Please try again." << endl;
            }
        }
    }
};

// -------------------------- Main Function --------------------------
int main() {
    SetConsoleOutputCP(CP_UTF8);
    FlashcardApp app;
    app.run();
    return 0;
}